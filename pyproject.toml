[tool.poetry]
name = "quinn"
version = "0.10.3"
description = "Pyspark helper methods to maximize developer efficiency"
authors = ["MrPowers <matthewkevinpowers@gmail.com>"]

# Maintainers of the project
maintainers = [
    "SemyonSinchenko <ssinchenko@apache.org>"
]

readme = "README.md"
homepage = "https://github.com/MrPowers/quinn/"
keywords = ['apachespark', 'spark', 'pyspark']

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

###########################################################################
#                         MAIN DEPENDENCIES
###########################################################################

[tool.poetry.dependencies]
python = ">=3.7,<4.0"

# Below are the optional dependencies
pyarrow = "13.0.0"
pandas = { version = "^1.5.3", optional = true }
numpy = { version = "^1.21.0", optional = true }
grpcio = { version = "^1.48.1", optional = true }
grpcio-status = { version = "^1.64.1", optional = true }

[tool.poetry.extras]
connect = ["pyarrow", "pandas", "numpy", "grpcio", "grpcio-status"]

###########################################################################
#                         DEPENDENCY GROUPS 
###########################################################################

[tool.poetry.group.development]
optional = true

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.testing]
optional = true

[tool.poetry.group.development.dependencies]
pyspark = ">2"
semver = "^3"
pre-commit = "*"

[tool.poetry.group.testing.dependencies]
pytest = "^7"
chispa = "0.9.4"
pytest-describe = "^2"
pyspark = ">2"
semver = "^3"

[tool.poetry.group.linting.dependencies]
ruff = "^0.0.291"

[tool.poetry.group.docs.dependencies]
mkdocstrings-python = "^0.8.3"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.5"
markdown-include = "^0.8.1"
mkdocs = "^1"
jupyterlab = "*"
mkdocs-jupyter = "*"
mkdocs-material = "*"
pymdown-extensions = "*"
mkdocs-macros-plugin = "*"
mkdocs-material-extensions = "*"
markdown-exec = "*"

###########################################################################
#                         LINTING CONFIGURATION 
###########################################################################


[tool.ruff]
select = ["ALL"]
line-length = 150
ignore = [
    "D100",
    "D203",    # Ignore blank line before summary of class
    "D213",    # Ignore multiline summary second line
    "T201",    # Allow print() in code.
    "D401",    # Docstrings should be in imperative modes
    "D404",    # Boring thing about how to write docsrings
    "FBT001",  # Boolean positional arg is OK
    "FBT002",  # Boolean default arg value is OK
    "D205",    # It is broken
    "TCH003",  # I have no idea what is it about
    "PLC1901", # Strange thing
    "SIM108",  # Don't create long ternary operators
    "PTH123",  # Don't force use of Pathlib
    "PTH207",  # Don't force use of Pathlib
    "PTH113",  # Don't force use of Pathlib
]
extend-exclude = ["tests", "docs"]

[tool.ruff.per-file-ignores]
"quinn/extensions/column_ext.py" = ["FBT003", "N802"]
"quinn/extensions/__init__.py" = ["F401", "F403"]
"quinn/__init__.py" = ["F401", "F403"]
"quinn/functions.py" = ["FBT003"]
"quinn/keyword_finder.py" = ["A002"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]